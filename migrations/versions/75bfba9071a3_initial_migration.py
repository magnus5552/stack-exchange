"""Initial migration

Revision ID: 75bfba9071a3
Revises: 
Create Date: 2025-04-04 01:21:13.970339

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '75bfba9071a3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('instruments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('ticker', sa.String(length=10), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint("ticker ~ '^[A-Z]{2,10}$'", name='ticker_format_check'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_instruments')),
    sa.UniqueConstraint('ticker', name=op.f('uq_instruments_ticker'))
    )
    op.create_index(op.f('ix_instruments_id'), 'instruments', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('role', postgresql.ENUM('USER', 'ADMIN', name='user_role_enum'), nullable=False),
    sa.Column('api_key', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('api_key', name=op.f('uq_users_api_key'))
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('balances',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('instrument_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='non_negative_amount'),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], name=op.f('fk_balances_instrument_id_instruments')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_balances_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'instrument_id', name=op.f('pk_balances'))
    )
    op.create_table('orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('instrument_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('LIMIT', 'MARKET', name='order_type_enum'), nullable=False),
    sa.Column('direction', sa.Enum('BUY', 'SELL', name='direction_enum'), nullable=False),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('filled', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('NEW', 'EXECUTED', 'PARTIALLY_EXECUTED', 'CANCELLED', name='order_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("(type = 'LIMIT' AND price IS NOT NULL) OR (type = 'MARKET' AND price IS NULL)", name='price_constraint_for_order_type'),
    sa.CheckConstraint('filled <= quantity', name='filled_less_than_quantity'),
    sa.CheckConstraint('quantity > 0', name='positive_quantity'),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], name=op.f('fk_orders_instrument_id_instruments')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_orders_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_orders'))
    )
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('buyer_order_id', sa.UUID(), nullable=False),
    sa.Column('seller_order_id', sa.UUID(), nullable=False),
    sa.Column('instrument_id', sa.Integer(), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('executed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('quantity > 0', name='positive_transaction_quantity'),
    sa.ForeignKeyConstraint(['buyer_order_id'], ['orders.id'], name=op.f('fk_transactions_buyer_order_id_orders')),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], name=op.f('fk_transactions_instrument_id_instruments')),
    sa.ForeignKeyConstraint(['seller_order_id'], ['orders.id'], name=op.f('fk_transactions_seller_order_id_orders')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transactions'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions')
    op.drop_table('orders')
    op.drop_table('balances')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_instruments_id'), table_name='instruments')
    op.drop_table('instruments')
    # ### end Alembic commands ###
