services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - DB_CONN_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DB_ECHO=${DB_ECHO:-True}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      - postgres
      - redis
    networks:
      - exchange-network
    restart: unless-stopped

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-6432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - exchange-network
    restart: unless-stopped
    
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    networks:
      - exchange-network
    restart: unless-stopped

  celery:
    build: .
    command: >
      bash -c "pip install -r requirements.txt &&
      celery -A app.tasks.celery_app worker --loglevel=info"
    volumes:
      - .:/app
    environment:
      - DB_CONN_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      - redis
      - postgres
    networks:
      - exchange-network
    restart: unless-stopped
    healthcheck:
      test: celery -A app.tasks.celery_app inspect ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 3


networks:
  exchange-network:

volumes:
  postgres-data: